<?xml version="1.0"?>
<doc>
    <assembly>
        <name>App.Metrics.Health.Abstractions</name>
    </assembly>
    <members>
        <member name="T:App.Metrics.Health.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:App.Metrics.Health.Logging.ILog.Log(App.Metrics.Health.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:App.Metrics.Health.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:App.Metrics.Health.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:App.Metrics.Health.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:App.Metrics.Health.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:App.Metrics.Health.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:App.Metrics.Health.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:App.Metrics.Health.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:App.Metrics.Health.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="M:App.Metrics.Health.Logging.LogProvider.SetCurrentLogProvider(App.Metrics.Health.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:App.Metrics.Health.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.Health.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:App.Metrics.Health.Logging.LogProvider.SetCurrentLogProvider(App.Metrics.Health.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:App.Metrics.Health.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:App.Metrics.Health.Logging.ILog"/></returns>
        </member>
        <member name="M:App.Metrics.Health.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:App.Metrics.Health.Logging.ILog"/></returns>
        </member>
        <member name="M:App.Metrics.Health.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:App.Metrics.Health.Logging.ILog"/></returns>
        </member>
        <member name="M:App.Metrics.Health.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:App.Metrics.Health.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:App.Metrics.Health.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:App.Metrics.Health.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:App.Metrics.Health.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curly braces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="P:App.Metrics.Health.IHealthBuilder.Configuration">
            <summary>
                Builder for configuring core App Metrics Health options.
            </summary>
        </member>
        <member name="P:App.Metrics.Health.IHealthBuilder.OutputHealth">
            <summary>
                <para>
                    Builder for configuring health check output formatting for reporting.
                </para>
                <para>
                    Multiple formatters can be used, in which case the <see cref="P:App.Metrics.Health.IHealthRoot.DefaultOutputHealthFormatter" />
                    will be set to the first configured formatter.
                </para>
            </summary>
        </member>
        <member name="P:App.Metrics.Health.IHealthBuilder.Report">
            <summary>
             Builder for configuring health status reporters.
            </summary>
        </member>
        <member name="M:App.Metrics.Health.IHealthBuilder.Build">
            <summary>
                Builds an <see cref="T:App.Metrics.Health.IHealth" /> with the services configured via an <see cref="T:App.Metrics.Health.IHealthBuilder" />.
            </summary>
            <returns>An <see cref="T:App.Metrics.Health.IHealthRoot" /> with services configured via an <see cref="T:App.Metrics.Health.IHealthBuilder" />.</returns>
        </member>
        <member name="P:App.Metrics.Health.IHealthCheckBuilder.Builder">
            <summary>
                Gets the <see cref="T:App.Metrics.Health.IHealthBuilder" /> where App Metrics Health is configured.
            </summary>
        </member>
        <member name="P:App.Metrics.Health.IHealthConfigurationBuilder.Builder">
            <summary>
            Gets the <see cref="T:App.Metrics.Health.IHealthBuilder"/> where App Metrics Helath is configured.
            </summary>
        </member>
        <member name="M:App.Metrics.Health.IHealthConfigurationBuilder.Configure(App.Metrics.Health.HealthOptions)">
            <summary>
                    Uses the specifed <see cref="T:App.Metrics.Health.HealthOptions" /> instance for App Metrics Health core configuration.
            </summary>
            <param name="options">An <see cref="T:App.Metrics.Health.HealthOptions" /> instance used to configure core App Metrics Health options.</param>
            <returns>
                An <see cref="T:App.Metrics.Health.IHealthBuilder" /> that can be used to further configure App Metrics Health.
            </returns>
        </member>
        <member name="M:App.Metrics.Health.IHealthConfigurationBuilder.Configure(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                <para>
                    Uses the specifed key value pairs to configure an <see cref="T:App.Metrics.Health.HealthOptions" /> instance for App Metrics Health core
                    configuration.
                </para>
                <para>
                    Keys match the <see cref="T:App.Metrics.Health.HealthOptions" />s property names.
                </para>
            </summary>
            <param name="optionValues">Key value pairs for configuring App Metrics Health</param>
            <returns>
                An <see cref="T:App.Metrics.Health.IHealthBuilder" /> that can be used to further configure App Metrics Health.
            </returns>
        </member>
        <member name="M:App.Metrics.Health.IHealthConfigurationBuilder.Configure(App.Metrics.Health.HealthOptions,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                <para>
                    Uses the specifed key value pairs to configure an <see cref="T:App.Metrics.Health.HealthOptions" /> instance for App Metrics Health core
                    configuration.
                </para>
                <para>
                    Keys match the <see cref="T:App.Metrics.Health.HealthOptions" />s property names. Any make key will override the
                    <see cref="T:App.Metrics.Health.HealthOptions" /> value configured.
                </para>
            </summary>
            <param name="options">An <see cref="T:App.Metrics.Health.HealthOptions" /> instance used to configure core App Metrics Health options.</param>
            <param name="optionValues">Key value pairs for configuring App Metrics</param>
            <returns>
                An <see cref="T:App.Metrics.Health.IHealthBuilder" /> that can be used to further configure App Metrics Health.
            </returns>
        </member>
        <member name="M:App.Metrics.Health.IHealthConfigurationBuilder.Configure(System.Action{App.Metrics.Health.HealthOptions})">
            <summary>
                <para>
                    Uses the specifed key value pairs to configure an <see cref="T:App.Metrics.Health.HealthOptions" /> instance for App Metrics Health core
                    configuration.
                </para>
                <para>
                    Keys match the <see cref="T:App.Metrics.Health.HealthOptions" />s property names. Any make key will override the
                    <see cref="T:App.Metrics.Health.HealthOptions" /> value configured.
                </para>
            </summary>
            <param name="setupAction">An <see cref="T:App.Metrics.Health.HealthOptions" /> setup action used to configure core App Metrics Health options.</param>
            <returns>
                An <see cref="T:App.Metrics.Health.IHealthBuilder" /> that can be used to further configure App Metrics Health.
            </returns>
        </member>
        <member name="M:App.Metrics.Health.IHealthConfigurationBuilder.Extend(App.Metrics.Health.HealthOptions)">
            <summary>
                Merges the specifed <see cref="T:App.Metrics.Health.HealthOptions" /> instance with any previously configured options.
            </summary>
            <param name="options">An <see cref="T:App.Metrics.Health.HealthOptions" /> instance used to configure core App Metrics Health options.</param>
            <returns>
                An <see cref="T:App.Metrics.Health.IHealthBuilder" /> that can be used to further configure App Metrics Health.
            </returns>
        </member>
        <member name="M:App.Metrics.Health.IHealthConfigurationBuilder.Extend(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                Merges the specifed <see cref="T:App.Metrics.Health.HealthOptions" /> instance with any previously configured options.
            </summary>
            <param name="optionValues">An <see cref="T:System.Collections.Generic.KeyValuePair`2"/> used to configure core App Metrics Health options.</param>
            <returns>
                An <see cref="T:App.Metrics.Health.IHealthBuilder" /> that can be used to further configure App Metrics Health.
            </returns>
        </member>
        <member name="P:App.Metrics.Health.IHealthOutputFormattingBuilder.Builder">
            <summary>
                Gets the <see cref="T:App.Metrics.Health.IHealthBuilder" /> where App Metrics Health is configured.
            </summary>
        </member>
        <member name="M:App.Metrics.Health.IHealthOutputFormattingBuilder.Using(App.Metrics.Health.Formatters.IHealthOutputFormatter)">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.Health.Formatters.IHealthOutputFormatter" /> as one of the available formatters when reporting
                    metric values.
                </para>
                <para>
                    Multiple formatters can be used, in which case the <see cref="P:App.Metrics.Health.IHealthRoot.DefaultOutputHealthFormatter" />
                    will be set to the first configured formatter.
                </para>
            </summary>
            <param name="formatter">An <see cref="T:App.Metrics.Health.Formatters.IHealthOutputFormatter" /> instance used to format metric values when reporting.</param>
            <returns>
                An <see cref="T:App.Metrics.Health.IHealthBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.Health.IHealthOutputFormattingBuilder.Using``1">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.Health.Formatters.IHealthOutputFormatter" /> as one of the available formatters when reporting
                    metric values.
                </para>
                <para>
                    Multiple formatters can be used, in which case the <see cref="P:App.Metrics.Health.IHealthRoot.DefaultOutputHealthFormatter" />
                    will be set to the first configured formatter.
                </para>
            </summary>
            <typeparam name="THealthOutputFormatter">
                An <see cref="T:App.Metrics.Health.Formatters.IHealthOutputFormatter" /> type used to format metric values
                when reporting.
            </typeparam>
            <returns>
                An <see cref="T:App.Metrics.Health.IHealthBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.Health.IHealthOutputFormattingBuilder.Using(App.Metrics.Health.Formatters.IHealthOutputFormatter,System.Boolean)">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.Health.Formatters.IHealthOutputFormatter" /> as one of the available formatters when reporting
                    metric values.
                </para>
                <para>
                    Multiple formatters can be used, in which case the <see cref="P:App.Metrics.Health.IHealthRoot.DefaultOutputHealthFormatter" />
                    will be set to the first configured formatter.
                </para>
            </summary>
            <param name="formatter">An <see cref="T:App.Metrics.Health.Formatters.IHealthOutputFormatter" /> instance used to format metric values when reporting.</param>
            <param name="replaceExisting">
                If [true] replaces matching formatter type with the formatter instance, otherwise the
                existing formatter instance of matching type.
            </param>
            <returns>
                An <see cref="T:App.Metrics.Health.IHealthBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="M:App.Metrics.Health.IHealthOutputFormattingBuilder.Using``1(System.Boolean)">
            <summary>
                <para>
                    Uses the specifed <see cref="T:App.Metrics.Health.Formatters.IHealthOutputFormatter" /> as one of the available formatters when reporting
                    metric values.
                </para>
                <para>
                    Multiple formatters can be used, in which case the <see cref="P:App.Metrics.Health.IHealthRoot.DefaultOutputHealthFormatter" />
                    will be set to the first configured formatter.
                </para>
            </summary>
            <typeparam name="THealthOutputFormatter">
                An <see cref="T:App.Metrics.Health.Formatters.IHealthOutputFormatter" /> type used to format metric values
                when reporting.
            </typeparam>
            <param name="replaceExisting">
                If [true] replaces matching formatter type with the formatter instance, otherwise the
                existing formatter instance of matching type.
            </param>
            <returns>
                An <see cref="T:App.Metrics.Health.IHealthBuilder" /> that can be used to further configure App Metrics.
            </returns>
        </member>
        <member name="P:App.Metrics.Health.IHealthReportingBuilder.Builder">
            <summary>
                Gets the <see cref="T:App.Metrics.Health.IHealthBuilder" /> where App Metrics Health is configured.
            </summary>
        </member>
        <member name="M:App.Metrics.Health.IHealthReportingBuilder.Using(App.Metrics.Health.IReportHealthStatus)">
            <summary>
                Reports health status using the specified <see cref="T:App.Metrics.Health.IReportHealthStatus" />.
            </summary>
            <param name="reporter">An <see cref="T:App.Metrics.Health.IReportHealthStatus" /> instance used to report health status.</param>
            <returns>
                An <see cref="T:App.Metrics.Health.IHealthBuilder" /> that can be used to further configure App Metrics Health.
            </returns>
        </member>
        <member name="M:App.Metrics.Health.IHealthReportingBuilder.Using``1">
            <summary>
                Reports metrics using the specified <see cref="T:App.Metrics.Health.IReportHealthStatus" />.
            </summary>
            <typeparam name="TReportHealth">
                An <see cref="T:App.Metrics.Health.IReportHealthStatus" /> type used to report health status.
            </typeparam>
            <returns>
                An <see cref="T:App.Metrics.Health.IHealthBuilder" /> that can be used to further configure App Metrics Health.
            </returns>
        </member>
        <member name="M:App.Metrics.Health.IHealthReportingBuilder.Using``1(System.TimeSpan)">
            <summary>
                Reports metrics using the specified <see cref="T:App.Metrics.Health.IReportHealthStatus" />.
            </summary>
            <param name="reportInterval">The <see cref="T:System.TimeSpan" /> interval used to schedule health status reporting.</param>
            <typeparam name="TReportHealth">
                An <see cref="T:App.Metrics.Health.IReportHealthStatus" /> type used to report health status.
            </typeparam>
            <returns>
                An <see cref="T:App.Metrics.Health.IHealthBuilder" /> that can be used to further configure App Metrics Health.
            </returns>
        </member>
        <member name="T:App.Metrics.Health.HealthCheck">
            <summary>
            Resprents a system health check which
            </summary>
            <summary>
                Cached Health Check - Allows caching of Health Check results given a duration to cache
            </summary>
            <summary>
                Quite Time Health Check - Ignores health check during "quite time"
            </summary>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.#ctor(System.String,System.Func{System.Threading.Tasks.ValueTask{App.Metrics.Health.HealthCheckResult}})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.HealthCheck" /> class.
            </summary>
            <param name="name">A descriptive name for the health check.</param>
            <param name="check">A function returning either a healthy or un-healthy result.</param>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.#ctor(System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{App.Metrics.Health.HealthCheckResult}})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.HealthCheck" /> class.
            </summary>
            <param name="name">A descriptive name for the health check.</param>
            <param name="check">A function returning either a healthy or un-healthy result.</param>
        </member>
        <member name="P:App.Metrics.Health.HealthCheck.Name">
            <summary>
                Gets the descriptive name for the health check.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
                Executes the health check asynchrously
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
                The <see cref="T:App.Metrics.Health.HealthCheck.Result" /> of running the health check
            </returns>
        </member>
        <member name="T:App.Metrics.Health.HealthCheck.Result">
            <summary>
                Represents the result of running a <see cref="T:App.Metrics.Health.HealthCheck" />
            </summary>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.Result.#ctor(System.String,App.Metrics.Health.HealthCheckResult)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.HealthCheck.Result" /> struct.
            </summary>
            <param name="name">A descriptive name for the health check</param>
            <param name="check">The result of executing a health check.</param>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.Result.#ctor(System.String,App.Metrics.Health.HealthCheckResult,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.HealthCheck.Result" /> struct.
            </summary>
            <param name="name">A descriptive name for the health check</param>
            <param name="check">The result of executing a health check.</param>
            <param name="isFromCache">
                <value>true</value>
                if the result was cached.
            </param>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.#ctor(System.String,System.Func{System.Threading.Tasks.ValueTask{App.Metrics.Health.HealthCheckResult}},System.TimeSpan)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.HealthCheck" /> class.
            </summary>
            <param name="name">A descriptive name for the health check.</param>
            <param name="check">A function returning either a healthy or un-healthy result.</param>
            <param name="cacheDuration">The duration of which to cache the health check result.</param>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.#ctor(System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{App.Metrics.Health.HealthCheckResult}},System.TimeSpan)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.HealthCheck" /> class.
            </summary>
            <param name="name">A descriptive name for the health check.</param>
            <param name="check">A function returning either a healthy or un-healthy result.</param>
            <param name="cacheDuration">The duration of which to cache the health check result.</param>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.QuiteTime.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.HealthCheck.QuiteTime" /> struct.
            </summary>
            <param name="from">
                A <see cref="T:System.TimeSpan" /> representing the (UTC) from hours and minutes of the day to ignore health
                checks.
            </param>
            <param name="to">
                A <see cref="T:System.TimeSpan" /> representing the (UTC) to hours and minutes of the day to ignore health
                checks.
            </param>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.QuiteTime.#ctor(System.TimeSpan,System.TimeSpan,System.DayOfWeek[])">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.HealthCheck.QuiteTime" /> struct.
            </summary>
            <param name="from">
                A <see cref="T:System.TimeSpan" /> representing the (UTC) from hours and minutes of the day to ignore health
                checks.
            </param>
            <param name="to">
                A <see cref="T:System.TimeSpan" /> representing the (UTC) to hours and minutes of the day to ignore health
                checks.
            </param>
            <param name="excludeDays">Days to exclude the quite time.</param>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.QuiteTime.#ctor(System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.HealthCheck.QuiteTime" /> struct.
            </summary>
            <param name="from">
                A <see cref="T:System.TimeSpan" /> representing the (UTC) from hours and minutes of the day to ignore health
                checks.
            </param>
            <param name="to">
                A <see cref="T:System.TimeSpan" /> representing the (UTC) to hours and minutes of the day to ignore health
                checks.
            </param>
            <param name="shouldCheck">If
                <value>True</value>
                , the health check will be executed but ignored when not healthy, otherwise the health check will not be executed.
            </param>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.QuiteTime.#ctor(System.TimeSpan,System.TimeSpan,System.Boolean,System.DayOfWeek[])">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.HealthCheck.QuiteTime" /> struct.
            </summary>
            <param name="from">
                A <see cref="T:System.TimeSpan" /> representing the (UTC) from hours and minutes of the day to ignore health
                checks.
            </param>
            <param name="to">
                A <see cref="T:System.TimeSpan" /> representing the (UTC) to hours and minutes of the day to ignore health
                checks.
            </param>
            <param name="shouldCheck">If
                <value>True</value>
                , the health check will be executed but ignored when not healthy, otherwise the health check will not be executed.
            </param>
            <param name="excludeDays">Days to exclude the quite time.</param>
        </member>
        <member name="T:App.Metrics.Health.HealthCheckResult">
            <summary>
                Result of a health check
            </summary>
        </member>
        <member name="P:App.Metrics.Health.HealthCheckResult.Message">
            <summary>
            Gets the status message of the check. A status can be provided for both healthy and unhealthy states.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="F:App.Metrics.Health.HealthCheckResult.Status">
            <summary>
                True if the check was healthy, degraded or unhealthy.
            </summary>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Degraded(System.String,System.Object[])">
            <summary>
                Create a Degraded status response. This is useful for when a health check may
                fail but the application itself is still functioning correct. E.g. There could be a
                health check checking the number of messages in a queue, if that number reaches a
                specified threshold, a degraded status could be returned rather than raising a critical alert.
            </summary>
            <param name="message">Status message.</param>
            <param name="values">Values to format the status message with.</param>
            <returns>A degraded health check result</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Degraded(System.Exception)">
            <summary>
                Create a Degraded status response. This is useful for when a health check may
                fail but the application itself is still functioning correct. E.g. There could be a
                health check checking the number of messages in a queue, if that number reaches a
                specified threshold, a degraded status could be returned rather than raising a critical alert.
            </summary>
            <param name="exception">Exception to use for reason.</param>
            <returns>Degraded status response.</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Degraded">
            <summary>
                Create a Degraded status response. This is useful for when a health check may
                fail but the application itself is still functioning correct. E.g. There could be a
                health check checking the number of messages in a queue, if that number reaches a
                specified threshold, a degraded status could be returned rather than raising a critical alert.
            </summary>
            <returns>Degraded status response.</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Healthy">
            <summary>
                Create a healthy status response.
            </summary>
            <returns>Healthy status response.</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Healthy(System.String,System.Object[])">
            <summary>
                Create a healthy status response.
            </summary>
            <param name="message">Status message.</param>
            <param name="values">Values to format the status message with.</param>
            <returns>Healthy status response.</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Ignore">
            <summary>
                Ignores this health check.
            </summary>
            <returns>An ignored health check result</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Ignore(System.String)">
            <summary>
                Ignores this health check.
            </summary>
            <param name="message">Status message.</param>
            <returns>An ignored health check result</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Unhealthy">
            <summary>
                Create a unhealthy status response.
            </summary>
            <returns>Unhealthy status response.</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Unhealthy(System.String,System.Object[])">
            <summary>
                Create a unhealthy status response.
            </summary>
            <param name="message">Status message.</param>
            <param name="values">Values to format the status message with.</param>
            <returns>Unhealthy status response.</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Unhealthy(System.Exception)">
            <summary>
                Create a unhealthy status response.
            </summary>
            <param name="exception">Exception to use for reason.</param>
            <returns>Unhealthy status response.</returns>
        </member>
        <member name="T:App.Metrics.Health.HealthCheckStatus">
            <summary>
                Possible status values of a health check result
            </summary>
        </member>
        <member name="F:App.Metrics.Health.HealthCheckStatus.Healthy">
            <summary>
                The check is healthy
            </summary>
        </member>
        <member name="F:App.Metrics.Health.HealthCheckStatus.Degraded">
            <summary>
                The check is degraded, failing but not critical
            </summary>
        </member>
        <member name="F:App.Metrics.Health.HealthCheckStatus.Unhealthy">
            <summary>
                The check is unhealthy
            </summary>
        </member>
        <member name="F:App.Metrics.Health.HealthCheckStatus.Ignored">
            <summary>
                The check was ignored
            </summary>
        </member>
        <member name="T:App.Metrics.Health.HealthOptions">
            <summary>
                Top level container for all configuration settings of Health
            </summary>
        </member>
        <member name="P:App.Metrics.Health.HealthOptions.ApplicationName">
            <summary>
                Gets or sets the application name used when reporting health status for example.
            </summary>
        </member>
        <member name="P:App.Metrics.Health.HealthOptions.Enabled">
            <summary>
                Gets or sets a value indicating whether [health checks enabled]. This will also avoid registering all health
                middleware if using App.Metrics.Health.Middleware.
            </summary>
            <value>
                <c>true</c> if [health enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.Health.HealthOptions.ReportingEnabled">
            <summary>
                Gets or sets a value indicating whether [reporting enabled].
            </summary>
            <value>
                <c>true</c> if [reporting enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:App.Metrics.Health.HealthStatus">
            <summary>
                Structure describing the status of executing all the health checks operations.
            </summary>
        </member>
        <member name="P:App.Metrics.Health.HealthStatus.Results">
            <summary>
                Gets result of each health check operation
            </summary>
            <value>
                The health check results.
            </value>
        </member>
        <member name="P:App.Metrics.Health.HealthStatus.Status">
            <summary>
                Gets all health checks passed.
            </summary>
            <value>
                The status.
            </value>
        </member>
        <member name="P:App.Metrics.Health.IHealthRoot.DefaultOutputHealthFormatter">
            <summary>
                Gets the default <see cref="T:App.Metrics.Health.Formatters.IHealthOutputFormatter" /> to use when health checks are attempted to be formatted.
            </summary>
            <value>
                The default <see cref="T:App.Metrics.Health.Formatters.IHealthOutputFormatter" />s that is used by this application.
            </value>
        </member>
        <member name="P:App.Metrics.Health.IHealthRoot.OutputHealthFormatters">
            <summary>
                Gets a list of <see cref="T:App.Metrics.Health.Formatters.IHealthOutputFormatter" />s that are used by this application to format health
                results.
            </summary>
            <value>
                A list of <see cref="T:App.Metrics.Health.Formatters.IHealthOutputFormatter" />s that are used by this application.
            </value>
        </member>
        <member name="P:App.Metrics.Health.IHealthRoot.Reporters">
            <summary>
                Gets a readonly collection of <see cref="T:App.Metrics.Health.IReportHealthStatus" />s which provide the ability to report on health
                check results.
            </summary>
        </member>
        <member name="P:App.Metrics.Health.IReportHealthStatus.ReportInterval">
            <summary>
                Gets <see cref="T:System.TimeSpan" /> interval to flush metrics values. Defaults to
                <see cref="F:App.Metrics.Health.HealthConstants.Reporting.DefaultReportInterval" />.
            </summary>
        </member>
        <member name="T:App.Metrics.Health.IRunHealthChecks">
            <summary>
                Provides access to the current health status of the application by executing registered <see cref="T:App.Metrics.Health.HealthCheck" />s
            </summary>
        </member>
        <member name="M:App.Metrics.Health.IRunHealthChecks.ReadAsync(System.Threading.CancellationToken)">
            <summary>
                Executes all registered health checks within the application
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
                The current health status of the application. A single health check failure will result in an un-healthy
                result
            </returns>
        </member>
        <member name="T:App.Metrics.Health.Serialization.HealthStatusSerializer">
            <summary>
                Serializes <see cref="T:App.Metrics.Health.HealthStatus" /> into the different formats.
            </summary>
        </member>
        <member name="M:App.Metrics.Health.Serialization.HealthStatusSerializer.Serialize(App.Metrics.Health.Serialization.IHealthStatusWriter,App.Metrics.Health.HealthStatus)">
            <summary>
                Serializes the specified <see cref="T:App.Metrics.Health.HealthStatus" /> and writes the health status using the specified
                <see cref="T:App.Metrics.Health.Serialization.IHealthStatusWriter" />.
            </summary>
            <param name="writer">The <see cref="T:App.Metrics.Health.Serialization.IHealthStatusWriter" /> used to write the health status.</param>
            <param name="healthStatus">The <see cref="T:App.Metrics.Health.HealthStatus" /> to serilize.</param>
        </member>
        <member name="M:App.Metrics.Health.Serialization.IHealthStatusWriter.Write(App.Metrics.Health.HealthStatus)">
            <summary>
            Writes the specified <see cref="T:App.Metrics.Health.HealthStatus"/>.
            </summary>
            <param name="healthStatus">The health status to write.</param>
        </member>
    </members>
</doc>
