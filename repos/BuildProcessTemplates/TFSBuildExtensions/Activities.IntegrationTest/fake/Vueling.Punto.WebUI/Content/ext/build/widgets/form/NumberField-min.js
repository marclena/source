Ext.form.NumberField=Ext.extend(Ext.form.TextField,{fieldClass:"x-form-field x-form-num-field",allowDecimals:!0,decimalSeparator:".",decimalPrecision:2,allowNegative:!0,minValue:Number.NEGATIVE_INFINITY,maxValue:Number.MAX_VALUE,minText:"The minimum value for this field is {0}",maxText:"The maximum value for this field is {0}",nanText:"{0} is not a valid number",baseChars:"0123456789",initEvents:function(){var n,t;Ext.form.NumberField.superclass.initEvents.call(this);n=this.baseChars+"";this.allowDecimals&&(n+=this.decimalSeparator);this.allowNegative&&(n+="-");this.stripCharsRe=new RegExp("[^"+n+"]","gi");t=function(t){var i=t.getKey(),r;(Ext.isIE||!t.isSpecialKey()&&i!=t.BACKSPACE&&i!=t.DELETE)&&(r=t.getCharCode(),n.indexOf(String.fromCharCode(r))===-1&&t.stopEvent())};this.el.on("keypress",t,this)},validateValue:function(n){if(!Ext.form.NumberField.superclass.validateValue.call(this,n))return!1;if(n.length<1)return!0;if(n=String(n).replace(this.decimalSeparator,"."),isNaN(n))return this.markInvalid(String.format(this.nanText,n)),!1;var t=this.parseValue(n);return t<this.minValue?(this.markInvalid(String.format(this.minText,this.minValue)),!1):t>this.maxValue?(this.markInvalid(String.format(this.maxText,this.maxValue)),!1):!0},getValue:function(){return this.fixPrecision(this.parseValue(Ext.form.NumberField.superclass.getValue.call(this)))},setValue:function(n){n=parseFloat(n);n=isNaN(n)?"":String(n).replace(".",this.decimalSeparator);Ext.form.NumberField.superclass.setValue.call(this,n)},parseValue:function(n){return n=parseFloat(String(n).replace(this.decimalSeparator,".")),isNaN(n)?"":n},fixPrecision:function(n){var t=isNaN(n);return!this.allowDecimals||this.decimalPrecision==-1||t||!n?t?"":n:parseFloat(parseFloat(n).toFixed(this.decimalPrecision))},beforeBlur:function(){var n=this.parseValue(this.getRawValue());n&&this.setValue(this.fixPrecision(n))}});Ext.reg("numberfield",Ext.form.NumberField)